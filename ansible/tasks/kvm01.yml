# https://docs.mirantis.com/mcp/master/mcp-deployment-guide/deploy-mcp-drivetrain/automated-deployment-of-mcp-drivetrain.html

- name: Install packages for kvm01
  apt:
    name: "{{ item }}"
  loop: "{{ kvm01_packages }}"

- name: Add vncserver to the systemd
  template:
    src: templates/vncserver-service.j2
    dest: /etc/systemd/system/vncserver@.service
  notify: reload systemd

- name: Create /home/{{ default_student_account_name }}/.vnc directory
  file:
    path: /home/{{ default_student_account_name }}/.vnc
    state: directory
    mode: 0700

- name: Set VNC password in /home/{{ default_student_account_name }}/.vnc/passwd
  shell: umask 077; echo "{{ default_access_password }}" | vncpasswd -f > /home/{{ default_student_account_name }}/.vnc/passwd
  args:
    creates: /home/{{ default_student_account_name }}/.vnc/passwd
  changed_when: false

- name: Add xstartup to student account /home/{{ default_student_account_name }}/.vnc/xstartup
  template:
    src: templates/vnc-xstartup.j2
    dest: /home/{{ default_student_account_name }}/.vnc/xstartup
    mode: 0755

- name: Change owner of /home/{{ default_student_account_name }}/.vnc to {{ default_student_account_name }}:{{ default_student_account_name }}
  file:
    path: /home/{{ default_student_account_name }}/.vnc
    owner: "{{ default_student_account_name }}"
    group: "{{ default_student_account_name }}"
    recurse: yes

- name: Create certificate for novnc
  command: openssl req -x509 -nodes -newkey rsa:2048 -keyout /etc/ssl/novnc.pem -out /etc/ssl/novnc.pem -days 365 -subj "/C=CZ/ST=Czech/L=Prague/O=Mirantis/CN={{ ansible_domain }}"
  args:
    creates: /etc/ssl/novnc.pem
  when: ansible_domain != ''

- name: Improve VNC output (no jpg compression)
  replace:
    path: /usr/share/novnc/include/rfb.js
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  loop:
    - regexp: "//(\\['compress_lo',      -255 \\],)"
      replace: '\1'
    - regexp: "^(\\s+)(\\['compress_hi',        -247 \\],)"
      replace: '\1//\2'

- name: Add systemd service for novnc
  template:
    src: templates/novnc.service.j2
    dest: /etc/systemd/system/novnc.service
  notify:
    - reload systemd
    - restart novnc

- name: Enable vncserver + https acces on ufw
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 443
    - 5901

- name: Add port forwarding for Jenkins and MAAS to be accessible form Public IP
  blockinfile:
    path: /etc/ufw/before.rules
    insertbefore: Don't delete these required lines, otherwise there will be errors
    block: |
      # nat Table rules
      *nat
      :POSTROUTING ACCEPT [0:0]
      :PREROUTING ACCEPT [0:0]

      # Masquarade traffic for {{ networks.deploy_network.subnet_netmask }} going out of {{ ansible_default_ipv4.interface }}
      -A POSTROUTING -s {{ networks.deploy_network.subnet_netmask }} -o {{ ansible_default_ipv4.interface }} -j MASQUERADE

      # Add port forwarding
      # Jenkins: http://{{ inventory_hostname }}:8081 -> http://{{ mcp_salt_master_ip }}:8081
      -A PREROUTING -i {{ ansible_default_ipv4.interface }} -d {{ ansible_default_ipv4.address }} -p tcp --dport 8081 -j DNAT --to-destination {{ mcp_salt_master_ip }}:8081
      # MAAS: http://{{ inventory_hostname }}/MAAS -> http://{{ mcp_salt_master_ip }}/MAAS
      -A PREROUTING -i {{ ansible_default_ipv4.interface }} -d {{ ansible_default_ipv4.address }} -p tcp --dport 8080 -j DNAT --to-destination {{ mcp_salt_master_ip }}:8080

      COMMIT
  notify:
    - restart ufw

- name: Run all notify sections
  meta: flush_handlers

- name: Start vncserver when booting
  service:
    name: vncserver@1.service
    enabled: yes
    state: started

- name: Start novnc when booting
  service:
    name: novnc
    enabled: yes
    state: started

- name: Create directory /var/lib/libvirt/images/cfg01/
  file:
    path: /var/lib/libvirt/images/cfg01
    state: directory

- name: Download VM image
  get_url:
    url: "{{ mcp_cfg01_image_url }}"
    dest: /var/lib/libvirt/images/cfg01/cfg01-day01.qcow2
    tmp_dest: /var/tmp/

- name: Copy the original cfg01-day01 to {{ mcp_cfg01_vm_source_disk }}
  copy:
    src: /var/lib/libvirt/images/cfg01/cfg01-day01.qcow2
    dest: "{{ mcp_cfg01_vm_source_disk }}"
    force: no
    remote_src: yes

- name: Clone repository with salt-model ({{ mcp_salt_model_git_repository }})
  git:
    repo: "{{ mcp_salt_model_git_repository }}"
    dest: /root/model

- name: Clone repository with mk-pipelines
  git:
    repo: "{{ mcp_mk_pipelines_git_repository }}"
    dest: /root/mk-pipelines
    version: "{{ mcp_release_tag }}"

- name: Clone repository with pipeline-library
  git:
    repo: "{{ mcp_pipeline_library_git_repository }}"
    dest: /root/pipeline-library
    version: "{{ mcp_release_tag }}"

- name: Download create-config-drive script ({{ mcp_create_config_drive_script_url }})
  get_url:
    url: "{{ mcp_create_config_drive_script_url }}"
    dest: /root/create-config-drive
    mode: 0755

- name: Download master_config script ({{ mcp_master_config_script_url }})
  get_url:
    url: "{{ mcp_master_config_script_url }}"
    dest: /root/user_data.sh
    mode: 0755

- name: Change the params in /root/user_data.sh "{{ mcp_master_config_script_url }}"
  lineinfile:
    path: /root/user_data.sh
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^export SALT_MASTER_DEPLOY_IP', line: 'export SALT_MASTER_DEPLOY_IP={{ mcp_salt_master_ip }}' }
    - { regexp: '^export SALT_MASTER_MINION_ID', line: 'export SALT_MASTER_MINION_ID=cfg01.{{ domain }}' }
    - { regexp: '^export DEPLOY_NETWORK_GW', line: 'export DEPLOY_NETWORK_GW={{ networks.deploy_network.gateway }}' }
    - { regexp: '^export DEPLOY_NETWORK_NETMASK', line: 'export DEPLOY_NETWORK_NETMASK={{ networks.deploy_network.netmask }}' }
    - { regexp: '^export DEPLOY_NETWORK_MTU', line: 'export DEPLOY_NETWORK_MTU=1450' }
    - { regexp: '^export MCP_VERSION', line: 'export MCP_VERSION="{{ mcp_salt_formulas_version }}"' }
    # Fix bug (https://gerrit.mcp.mirantis.net/#/c/22842/) !!!!! xxxx TODO
    - { regexp: '^for i in', line: 'for i in $(salt-key -l accepted | grep -v Accepted | grep -v {{ domain }} | grep -v "$SALT_MASTER_MINION_ID"); do' }

- name: Download define-vm script ({{ mcp_define_vm_script_url }})
  get_url:
    url: "{{ mcp_define_vm_script_url }}"
    dest: /root/define-vm.sh
    mode: 0755

- block:
  - name: Create the iso from salt model
    command: /root/create-config-drive -u /root/user_data.sh -h cfg01 --model /root/model --mk-pipelines /root/mk-pipelines --pipeline-library /root/pipeline-library {{ mcp_cfg01_vm_config_disk }}
    args:
      chdir: /root
      creates: "{{ mcp_cfg01_vm_config_disk }}"

  - name: Define the cfg01 VM
    command: /root/define-vm.sh
    args:
      chdir: /root
      creates: "/root/cfg01.{{ domain }}-vm.xml"
    environment:
      VM_NAME: "cfg01.{{ domain }}"
      VM_SOURCE_DISK: "{{ mcp_cfg01_vm_source_disk }}"
      VM_CONFIG_DISK: "{{ mcp_cfg01_vm_config_disk }}"
      VM_MGM_BRIDGE_NAME: "{{ networks.deploy_network.device }}"
      VM_CTL_BRIDGE_NAME: "{{ networks.control_network.device }}"
      VM_MEM_KB: "{{ mcp_cfg01_vm_mem_kb }}"
      VM_CPUS: "{{ mcp_cfg01_vm_cpus }}"
    register: define_vm_output
    changed_when: define_vm_output.stdout is search('defined from')

  - name: Start cfg01.{{ domain }}
    virt:
      name: cfg01.{{ domain }}
      state: running
  when: packer_build_name is not defined

- name: Notes...
  debug:
    msg:
      - Install libvirt-clients and add VMs to MAAS in cfg01 by running - ssh {{ default_student_account_name }}@{{ ansible_host }}; virsh console cfg01.{{ domain }}; apt install -y libvirt-bin
      - Enable DHCP and change MTU in MAAS by going to http://{{ ansible_host }}:8080/MAAS (mirantis/r00tme) then 'DHCP Subnets -> untagged -> Provide DHCP'
      - Add your ssh public key into the default account
      - for A in {1..{{ vm_count }}}; do for B in {1..{{ nested_vms_count }}}; do maas mirantis machines create power_parameters_power_address=qemu+tcp://10.0.0.1$A/system hostname={{ prefix }}-kvm0$A-pxe0$B power_type=virsh power_parameters_power_id={{ prefix }}-kvm0$A-pxe0$B architecture=amd64/generic mac_addresses=52:54:00:00:0$A:0$B; done; done
      - "MAAS   : http://{{ ansible_host }}:8080/MAAS (mirantis/r00tme)"
      - "Jenkins: http://{{ ansible_host }}:8081 (admin/r00tme)"
      - "noVNC  : https://{{ ansible_host }}/vnc.html?port=443&true_color=1&password={{ default_access_password }}"
      - "VNC    : vnc://{{ ansible_host }}:5901, Password: {{ default_access_password }}"
      - "ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no {{ default_student_account_name }}@{{ ansible_host }} | {{ ansible_hostname }}, Password: {{ default_access_password }}"
