- name: Set fact public_ip
  set_fact:
    public_ip: "{{ ansible_host }}"

- name: Add Salt Stack GPG key
  apt_key:
    url: https://repo.saltstack.com/apt/ubuntu/{{ ansible_distribution_version }}/amd64/latest/SALTSTACK-GPG-KEY.pub

- name: Add salt repository
  apt_repository:
    repo: deb [arch=amd64] http://mirror.mirantis.com/{{ mcp_release_tag }}/saltstack-{{ saltstack_repository_version }}/{{ ansible_distribution_release }}/ {{ ansible_distribution_release }} main

- name: Update all packages
  apt:
    upgrade: dist
    update_cache: yes

- name: Install packages
  apt:
    name: "{{ item }}"
  loop: "{{ packages }}"

- name: Set proper hostname / domain
  hostname:
    name: "{{ inventory_hostname }}"

- name: Build hosts file
  template:
    src: templates/hosts.j2
    dest: /etc/hosts
    backup: yes

- name: Start services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - acpid
    - haveged
    - salt-minion


######################################################
# Optimize Virtualization
######################################################
- name: Add module parameters for kvm_intel into /etc/modprobe.d/kvm_intel.conf
  template:
    dest: /etc/modprobe.d/kvm_intel.conf
    src: templates/kvm_intel.conf.j2


######################################################
# Configure networking and libvirt
######################################################
- name: Set IP forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_set: yes

- name: Configure libvirt daemon
  blockinfile:
    path: /etc/libvirt/libvirtd.conf
    block: |
      listen_tls = 0
      listen_tcp = 1
      listen_addr = "0.0.0.0"
      auth_tcp = "none"
  notify:
    - restart libvirt

- name: Configure libvirt daemon
  lineinfile:
    path: /etc/default/libvirt-bin
    regexp: '^libvirtd_opts'
    line: libvirtd_opts="--listen --config /etc/libvirt/libvirtd.conf"
  notify:
    - restart libvirt

- name: Add vxlan configuration to /etc/network/interfaces.d/60-vxlan-bridge.cfg
  template:
    dest: /etc/network/interfaces.d/60-vxlan-bridge.cfg
    src: templates/60-vxlan-bridge.cfg.j2
  register: network_interfaces


######################################################
# Add student + ubuntu account
######################################################
- name: Add user {{ default_student_account_name }}
  user:
    name: "{{ default_student_account_name }}"
    comment: Student account
    groups: libvirtd,kvm
    shell: /bin/bash

- name: Add user {{ default_username }}
  user:
    name: "{{ default_username }}"
    comment: Ubuntu account
    groups: libvirtd,kvm
    shell: /bin/bash

- name: Add {{ default_student_account_name }} account to sudoers to skip password questions
  blockinfile:
    path: /etc/sudoers.d/80-student-account
    create:  yes
    block: |
      {{ default_student_account_name }} ALL=(ALL) NOPASSWD:ALL

- name: Allow user student to log in using password via ssh
  blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      Match User {{ default_student_account_name }}
      PasswordAuthentication yes
  notify: restart sshd


######################################################
# Set all passwords and ssh keys
######################################################
- block:
  - name: Generate private/public ssh keys for access inside all VMs
    command: ssh-keygen -t rsa -b 2048 -f /root/.ssh/id_rsa -N "" -q
    args:
      creates: /root/.ssh/id_rsa

  - name: Get generated private ssh key for access inside all VMs
    command: cat /root/.ssh/id_rsa
    register: generated_ssh_private_key
    changed_when: false

  - name: Get generated public ssh key for access inside all VMs
    command: cat /root/.ssh/id_rsa.pub
    register: generated_ssh_public_key
    changed_when: false
  when: packer_build_name is not defined
  run_once: true

- block:
  - name: Remove vagrant public key
    authorized_key:
      user: ubuntu
      key: https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub
      state: absent

  - name: Add own public keys "{{ ssh_public_key }}" to all accounts
    authorized_key:
      user: "{{ item }}"
      key: "{{ lookup('file', ssh_public_key) }}"
    loop:
      - "{{ default_username }}"
      - root
      - "{{ default_student_account_name }}"

  - name: Add generated public keys to all accounts
    authorized_key:
      user: "{{ item }}"
      key: "{{ generated_ssh_public_key.stdout }}"
    loop:
      - "{{ default_username }}"
      - root
      - "{{ default_student_account_name }}"

  - name: Add generated ssh private key to all users $HOME/.ssh/id_rsa
    copy:
      content: "{{ generated_ssh_private_key.stdout }}"
      dest: "{{ item }}/.ssh/id_rsa"
      mode: 0600
      owner: "{{ item | basename }}"
      group: "{{ item | basename }}"
    loop:
      - "/home/{{ default_username }}"
      - /root
      - "/home/{{ default_student_account_name }}"

  - name: Generate access password for all users
    set_fact:
      default_access_password: "{{ lookup('password', file_with_generated_access_password_prefix + ' chars=ascii_letters,digits,length=6') }}"
    delegate_to: localhost
    changed_when: false

  - name: Set passwords for all users (root, student, ubuntu)
    user:
      name: "{{ item }}"
      password: "{{ default_access_password | password_hash('sha512') }}"
    loop:
      - "{{ default_username }}"
      - root
      - "{{ default_student_account_name }}"
    changed_when: false

  - name: Configure ssh ~/.ssh/config for all users
    template:
      src: templates/config.j2
      dest: "{{ item }}/.ssh/config"
      mode: 0600
      owner: "{{ item | basename }}"
      group: "{{ item | basename }}"
    loop:
      - "/home/{{ default_username }}"
      - /root
      - "/home/{{ default_student_account_name }}"
  when: packer_build_name is not defined

- name: Check if symling /var/lib/libvirt/images -> /mnt already exists
  stat:
    path: /var/lib/libvirt/images
  register: images_stat

- name: Create symlink /var/lib/libvirt/images
  block:
    - name: Remove the /var/lib/libvirt/images directory
      file:
        path: /var/lib/libvirt/images
        state: absent

    - name: Create symlink for /mnt to /var/lib/libvirt/images
      file:
        src: /mnt
        dest: /var/lib/libvirt/images
        mode: 0775
        state: link
  when: not images_stat.stat.islnk


######################################################
# Configure firewall
######################################################
- name: Enable ssh acces on ufw
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 22

- name: Change ufw settings /etc/default/ufw
  lineinfile:
    dest: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY'
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
  notify: restart ufw

- name: Allow all access from 10.0.0.0/8, 192.168.0.0/16 networks
  ufw:
    rule: allow
    src: '{{ item }}'
  with_items:
    - 10.0.0.0/8
    - 192.168.0.0/16

- name: Enable UFW
  ufw:
    state: enabled


######################################################
# Salt configuration
######################################################
- name: Configure salt-minion
  blockinfile:
    path: /etc/salt/minion
    backup: yes
    block: |
      id: {{ ansible_hostname | regex_replace('.*(kvm[0-9]{2}).*', '\1') }}.{{ domain }}
      master: {{ mcp_salt_master_ip }}
  notify: restart salt-minion
  when: packer_build_name is not defined


######################################################
# Reboot
######################################################
- name: Check if reboot is necessary by locatimng the /var/run/reboot-required
  stat:
    path: /var/run/reboot-required
  register: reboot_required

- name: Reboot check
  block:
  - name: Reboot machine
    shell: sleep 2 && shutdown -r now "Ansible triggered reboot"
    async: 1
    poll: 0
    ignore_errors: true

  - name: Wait for system to boot up
    wait_for:
      host: "{{ ansible_host }}"
      port: "{{ ansible_port | default('22') }}"
      search_regex: OpenSSH
      delay: 10
    connection: local
    become: False
  when: reboot_required.stat.exists or network_interfaces.changed and packer_build_name is not defined

