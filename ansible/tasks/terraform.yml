- name: Save terraform variables to file
  template:
    src: templates/terraform.tfvars.j2
    dest: terraform/{{ cloud_platform }}/terraform.tfvars

- name: Change infrastructure using terraform (this may take a long time...)
  terraform:
    state: "{{ terraform_state }}"
    project_path: terraform/{{ cloud_platform }}/
  register: terraform_apply_output

- name: End if terraform state is not absent (stack was deleted)
  meta: end_play
  when: terraform_state == 'absent'

- name: Add kvm hosts created by ARM template
  add_host:
    name: "{{ item.0 }}"
    ansible_host: "{{ item.1 }}"
    groups:
      - training_lab_{{ item.0.split('.')[1] }}
      - training_lab_{{ item.0.split('.')[1] }}_{{ item.0 | regex_replace('^' + prefix + '-(\w{3})\d{2}.*', '\1') }}
      - training_lab_{{ item.0 | regex_replace('^' + prefix + '-(\w{3})\d{2}.*', '\1') }}
      - training_lab
  changed_when: false
  loop: "{{ terraform_apply_output.outputs.vms_name.value|zip(terraform_apply_output.outputs.vms_public_ip.value)|list }}"

- name: Add kvm01 hosts to training_lab_kvm01 group
  add_host:
    name: "{{ item }}"
    groups: training_lab_kvm01
  loop: "{{ groups['training_lab'] }}"
  when: item is search("-kvm01.")
  changed_when: false

- name: Wait for all VMs to boot
  wait_for:
    host: "{{ hostvars[item].ansible_host }}"
    port: "22"
    search_regex: OpenSSH
    delay: 1
  loop: "{{ groups['training_lab'] }}"
