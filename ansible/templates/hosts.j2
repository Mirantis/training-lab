127.0.0.1 localhost

############ Training lab real Cloud IPs ({{ cloud_network }})
{% for node in groups['training_lab'] if node | regex_search(ansible_domain) %}
{{ hostvars[node]['ansible_default_ipv4']['address'] }} {{ hostvars[node]['ansible_hostname'] }} {{ node }}
{% endfor %}

{% for network in networks.items() | sort(attribute='1.subnet_netmask') %}
############ Training lab - {{ network.0 }} ({{ network.1.subnet_netmask }}, {{ network.1.gateway }}) [{{ network.1.device }}]
{% for node in groups['training_lab'] if node | regex_search(ansible_domain) %}
{{ network.1.subnet_netmask | ipaddr(hostvars[node].ansible_default_ipv4.address.split('.')[-1]) | ipaddr('address') }} {{ hostvars[node]['ansible_fqdn'] | regex_replace('.*\-(\w{3}\d{2}).*', '\\1') }}-{{ network.1.device | regex_replace('br-(\w)', '\\1') }}.{{ domain }} {{ hostvars[node]['ansible_fqdn'] | regex_replace('.*\-(\w{3}\d{2}).*', '\\1') }}-{{ network.1.device | regex_replace('br-(\w)', '\\1') }}{% if network.1.device | regex_search('mgm') %} {{ hostvars[node]['ansible_fqdn'] | regex_replace('.*\-(\w{3}\d{2}).*', '\\1') }}.{{ domain }} {{ hostvars[node]['ansible_fqdn'] | regex_replace('.*\-(\w{3}\d{2}).*', '\\1') }}{% endif %}

{% endfor %}

{% endfor %}

# The following lines are desirable for IPv6 capable hosts
::1 ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
